/**
 * @fileoverview Firestore Security Rules for ProjectZen.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user data and a shared-access model for projects and their tasks.
 * Users can only read and write their own data. Projects are shared between team members.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user data, accessible only by the owning user.
 * - /projects/{projectId}: Stores project data, accessible by team members listed in the 'teamMemberIds' array.
 * - /projects/{projectId}/tasks/{taskId}: Stores task data, accessible by team members of the parent project.
 * - /team_members/{teamMemberId}: Stores team member data, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents.
 * - Listing all users is disallowed.
 * - Projects are accessible to team members.
 * - Tasks inherit access control from their parent project.
 * - Team members are publicly readable.
 *
 * Denormalization for Authorization:
 * The 'projects' documents contain a denormalized 'teamMemberIds' array. This enables efficient security rules without needing to perform expensive `get()` operations on a separate 'memberships' collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for the '/users/{userId}' collection.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their own user document.
     *     request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'
     * @allow (get,update,delete) - User 'user_abc' can get, update, and delete their own user document.
     *     request.auth.uid == 'user_abc'
     * @deny (create) - User 'user_xyz' cannot create a document for user 'user_abc'.
     *     request.auth.uid == 'user_xyz' and request.resource.data.id == 'user_abc'
     * @deny (get,update,delete) - User 'user_xyz' cannot get, update or delete user 'user_abc' document.
     *     request.auth.uid == 'user_abc'
     * @principle Enforces document ownership for all operations.  Validates id on create and enforces immutability of id on update.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces shared access to projects based on team membership.
     * @path /projects/{projectId}
     * @allow (get,list) - Any authenticated user can read a project.
     *     request.auth.uid != null
     * @allow (create) - User 'user_abc' can create a new project.
     *     request.auth.uid != null
     * @allow (update,delete) - User 'user_abc' can update/delete a project if they are a team member.
     *     request.auth.uid == 'user_abc' and 'user_abc' in resource.data.teamMemberIds
     * @deny (update,delete) - User 'user_xyz' cannot update/delete the project if they are not a team member.
     *     request.auth.uid == 'user_xyz' and 'user_xyz' not in resource.data.teamMemberIds
     * @principle Grants read access to all, restricts write access to team members.
     */
    match /projects/{projectId} {
        function isTeamMember() {
            return request.auth.uid in resource.data.teamMemberIds;
        }

        allow get, list: if true;
        allow create: if request.auth.uid != null;
        allow update: if isTeamMember() && resource != null;
        allow delete: if isTeamMember() && resource != null;
    }

    /**
     * @description Enforces that only team members of a project can manage its tasks.
     * @path /projects/{projectId}/tasks/{taskId}
     * @allow (get,list) - Any authenticated user can read the task if they are a team member of the project.
     *     request.auth.uid != null
     * @allow (create) - User 'user_abc' can create a task if they are a team member of the project.
     *     request.auth.uid == 'user_abc' and 'user_abc' in get(/databases/$(database)/documents/projects/$(projectId)).data.teamMemberIds
     * @allow (update,delete) - User 'user_abc' can update/delete a task if they are a team member of the project.
     *     request.auth.uid == 'user_abc' and 'user_abc' in get(/databases/$(database)/documents/projects/$(projectId)).data.teamMemberIds
     * @deny (create,update,delete) - User 'user_xyz' cannot create/update/delete the task if they are not a team member of the project.
     *     request.auth.uid == 'user_xyz' and 'user_xyz' not in get(/databases/$(database)/documents/projects/$(projectId)).data.teamMemberIds
     * @principle Inherits access control from the parent project's team membership.
     */
    match /projects/{projectId}/tasks/{taskId} {
        function isProjectTeamMember() {
            return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.teamMemberIds;
        }

        allow get, list: if true;
        allow create: if isProjectTeamMember();
        allow update: if isProjectTeamMember() && resource != null;
        allow delete: if isProjectTeamMember() && resource != null;
    }

    /**
     * @description Allows public read access to team member profiles.
     * @path /team_members/{teamMemberId}
     * @allow (get,list) - Any user can read team member profiles.
     *     request.auth.uid != null
     * @deny (create,update,delete) - No one can create, update, or delete team member profiles.
     *     request.auth.uid != null
     * @principle Provides public read access with no write access.
     */
    match /team_members/{teamMemberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}